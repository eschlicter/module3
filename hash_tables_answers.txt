>What is a hash table?

A: A hash table is a data structure that is used to store key: value pairs. It is a key => value lookup.


>What is hashing?

A: Hashing is a technique that is used to uniquely identify a specific object from a group of similar objects


>How does a hash table store data?

A: It takes the key, converts it to a hash code (using hash function), uses the code to get an index, and then stores the value in the index.


>How are hash tables and objects different?

A: Hash tables contain data with a variable number of consistently formatted values, each with an identifier; like employee information. And an object will contain a static number of distinct values of different types.


Determine whether you would use a hash table or an object to store each of the following pieces of data:

>A list of pets and their unique names.

A: hash table


>The name, age, and the birthday of your best friend.

A: object

>The name and location of every company in a given city.

A: hash table

>All of the books checked out from a library by a particular individual.

A: object

>The primary and secondary phone numbers for a contact.

A: hash table

>Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

```

function hash(string){
  var hash = 0;
  for (let i = 0; i < string.length; i++){
    hash += string.charAt(i)
  }
  return hash;
};

let HashTable = function() {
  let storage = [];
  const storageMax = 10;

  this.add = function(phone, name, address){
    var index = hash(phone, storageMax);
    if (storage[index] === undefined) {
      storage[index] = [ [phone, name, address]
      ];
    } else {
      var input = false;
      for (var i =0; i < storage[index].length; i++) {
        if (storage[index][i][0] === phone) {
          storage[index][i][1] = address;
          input = true;
      }
    }
    if (input === false){
      storage[index].push([phone, name, address]);
    }
  }
};

this.remove = function(phone) {
  var index = hash(phone, storageMax);
  if (storage[index].length === 1 && storage[index][0][0] === phone) {
    delete storage[index];
  } else {
    for (var i = 0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        delete storage[index][i];
      }
    }
  }
};

this.lookup = function(phone) {
  var index = hash(phone, storageMax);
  if (storage[index] === undefined){
    return undefined;
  } else {
    for (var i =0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        return storage[index][i][1];
      }
    }
  }
};
};

var customers = new HashTable();
customers.add("949-228-2671", "Emily", "63 Legacy");
customers.add("949-433-8138", "Jane", "2857 W Logan Blvd");
customers.add("949-394-5920", "Katelin", "2 Upper");
customers.lookup("949-433-8138"); //Jane
```

>Build a system that allows a store owner to track their store's inventory using a hash table for storage.
```
function hash(string){
  var hash = 0;
  for (let i = 0; i < string.length; i++){
    hash += string.charAt(i);
  }
  return hash;
}

let HashTable = function() {
  let storage = [];
  const storageMax = 10;

  this.add = function(key, value) {
    var index = hash(key, storageMax);
    if (storage[index] === undefined){
      storage[index] = [
        [key, value]
        ];
    } else {
      var input = false;
      for (var i = 0; i < storage[index].length; i++ ){
        if (storage[index][i][0] === key){
          storage[index][i][1] = value;
          input = true;
        }
      }
      if (input === false){
        storage[index].push([key, value]);
      }
    }
  };

  this.lookup = function(key) {
    var index = hash(key, storageMax);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (let i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key){
          return storage[index][i][1];
        }
      }
    }
  };
};

var inventoryList = new HashTable();
inventoryList.add("pants", 50);
inventoryList.add("shirts", 60);
inventoryList.add("shoes", 30)
inventoryList.lookup('pants');//50
inventoryList.lookup('shoes');//30
```

>Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
```
//Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
function hash(string){
  var hash = 0;
  for (let i = 0; i < string.length; i++){
    hash += string.charAt(i);
  }
  return hash;
}

let HashTable = function(){
  let storage = [];
  const storageMax = 10;

  this.add = function(key, value){
    var index = hash(key, storageMax);
    if (storage[index] === undefined){
      storage[index] = [[key, value]];
    } else {
      var input = false;
      for (var i = 0; i < storage[index].length; i++){
        if (storage[index][i][0] === key){
          storage[index][i][1] = value;
          input = true;
        }
      }
      if (input === false) {
        storage[index].push([key, value]);
      }
    }
  };
  this.lookup = function (key) {
    var index = hash(key, storageMax);
    if (storage[index] === undefined){
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++){
        if (storage[index][i][0] === key){
          return storage[index][i][1];
        }
      }
    }
    };
    this.lookupDate = function(value) {
      var index = hash(value, storageMax);
      if(storage[index] === undefined){
        return undefined;
      } else {
        for (var i = 0; i < storage[index].length; i++){
          if (storage[index][i][1] === value) {
            return storage[index][i][2];
          }
        }
      }
    };
};


var newsArchive = new HashTable();
newsArchive.add("OC Register", "2007");
newsArchive.lookup("OC Register");
newsArchive.lookupDate('2007');

newsArchive.lookup("OC Register")
```
