> 1. What is time complexity and what is its relation to algorithms?

A: Time complexity is a function that estimates the time it takes for a program/algorithm to execute.

> 2. What is runtime?

A: Runtime is the physical time duration of an algorithm. Runtime can refer to the physical time duration of an algorithm, but is often used synonymously with time complexity.

> 3. How is the runtime of an algorithm calculated?

A: Runtime is calculated by adding up how many instructions the algorithm will execute as a function of the size of its input, then simplifying the expression to the largest term and dropping any constants.

> 4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:
O(1) : Constant Growth Rate
O(log n) : Logarithmic Growth Rate
O(n) : Linear Growth Rate
O(n log n) : Log-Linear Growth Rate
O(n^2) : Quadratic Growth Rate
**O(nk) : Polynomial Growth Rate**
O(2^n) : Exponential Growth Rate

> 5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: A party planner has a limited budget for an upcoming event. She'll need to figure out how much it will cost her client to rent a space and pay per person for meals. If the cost of the rental space is $780 and the price per person for food is $9.75, a linear equation can be constructed to show the total cost, expressed as y, for any number of people in attendance, or x. The linear equation would be written as y = 9.75x + 780. With this equation, the party planner can substitute any number of party guests and give her client the actual cost of the event with the food and rental costs included.

> 6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target) FOR each number in the array
IF number = target THEN RETURN true
END IF END FOR
RETURN false END FUNCTION

A: O(n)

> 7. Determine the time complexity of the following snippet of code.
If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
FOR each number in the array
FOR each number in the array print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2)

> 8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number) IF number < 1 THEN
ERROR
ELSE IF number = 1 or 2 THEN
RETURN 1 ELSE
CALL fibonacci WITH number - 2 RETURNING twoBack CALL fibonacci WITH number - 1 RETURNING oneBack RETURN twoBack + oneBack
 END IF
END FUNCTION


A: O(2^n)

> 9. Out of the code snippets you just saw, which is the most time efficient?

A: linearSearch "O(n)" is the most efficient
